nextflow_process {

    name "Test Process SOURCEPREDICT"
    script "../main.nf"
    process "SOURCEPREDICT"
    config "./nextflow.config"
    tag "modules"
    tag "modules_nfcore"
    tag "sourcepredict"

    test("metagenome - csv") {

        when {
            process {
                """                
                input[0] = [
                    [ id:'test' ], // meta map
                    file('/nesi/nobackup/uoo02328/meriam/test-datasets/data/genomics/prokaryotes/metagenome/taxonomy/misc/sink_taxid.csv', checkIfExists: true),
                ]
                input[1] = file('/nesi/nobackup/uoo02328/meriam/test-datasets/data/genomics/prokaryotes/metagenome/taxonomy/misc/sources_taxid.csv', checkIfExists: true)
                input[2] = file('/nesi/nobackup/uoo02328/meriam/test-datasets/data/genomics/prokaryotes/metagenome/taxonomy/misc/sources_labels.csv', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.report,
                    process.out.versions,
                ).match()
                }
            )
        }

    }

    test("metagenome - csv - stub") {

        options "-stub"

        when {
            process {
                """                
                input[0] = [
                    [ id:'test' ], // meta map
                    file('/nesi/nobackup/uoo02328/meriam/test-datasets/data/genomics/prokaryotes/metagenome/taxonomy/misc/sink_taxid.csv', checkIfExists: true),
                ]
                input[1] = file('/nesi/nobackup/uoo02328/meriam/test-datasets/data/genomics/prokaryotes/metagenome/taxonomy/misc/sources_taxid.csv', checkIfExists: true)
                input[2] = file('/nesi/nobackup/uoo02328/meriam/test-datasets/data/genomics/prokaryotes/metagenome/taxonomy/misc/sources_labels.csv', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.report,
                    process.out.versions,
                ).match()
                }
            )
        }

    }

}
